- content_for :head do
  = render 'locomotive/sites/domains'

- content_for :backbone_view_data do
  :plain
    { site: #{@site.to_json}, errors: #{@site.errors.to_json} }

= f.inputs :name => :information, :style => "#{'display: none' unless @site.new_record?}" do
  = f.input :name, :required => false

= f.inputs :name => :seo, :class => "inputs foldable #{'folded' if inputs_folded?(@site)}" do
  = f.input :seo_title
  = f.input :meta_keywords
  = f.input :meta_description

- if can?(:point, Locomotive::Site)
  - if manage_subdomain_or_domains?
    = f.inputs :name => :access_points do
      = f.input :subdomain, :as => :'Locomotive::Subdomain', :domain => application_domain, :input_html => { :readonly => !manage_subdomain? }

      - if manage_domains?
        = f.input :domains, :as => :'Locomotive::Empty'

- if can?(:index, Locomotive::Membership)

  = f.inputs :name => :memberships do
    %li{ :class => 'input empty no-label' }
      .list.memberships
        = f.semantic_fields_for :memberships do |fm|

          - membership, account = fm.object, fm.object.account

          .entry
            = fm.hidden_field :_destroy

            %strong= account.name

            %em.email= account.email

            - if can?(:update, membership)
              .role
                - if can?(:grant_admin, membership)
                  = fm.select :role, Locomotive::Ability::ROLES.map { |r| [t("locomotive.memberships.roles.#{r}"), r] }, :include_blank => false
                - else
                  = fm.select :role, (Locomotive::Ability::ROLES - ['admin']).map { |r| [t("locomotive.memberships.roles.#{r}"), r] }, :include_blank => false

              %span.actions
                = link_to 'x', '#', :class => 'remove'

            - else
              .role
                %em.locked= t("locomotive.memberships.roles.#{membership.role}")

- if can?(:manage, current_site)

  = f.inputs :name => :robots_txt, :class => "inputs foldable #{'folded' if inputs_folded?(@site)}" do
    = f.input :robots_txt, :as => :'Locomotive::Code', :picker => false, :wrapper_html => { :class => 'small' }
