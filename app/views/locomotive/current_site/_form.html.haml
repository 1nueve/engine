- content_for :head do
  = render 'domain'

- content_for :backbone_view_data do
  :plain
    { site: #{@site.to_json}, errors: #{@site.errors.to_json} }

= f.inputs :name => :information, :style => "#{'display: none' unless @site.new_record?}" do
  = f.input :name, :required => false

= f.inputs :name => :seo, :class => "inputs foldable #{'folded' if inputs_folded?(@site)}" do
  = f.input :seo_title
  = f.input :meta_keywords
  = f.input :meta_description

- if can?(:point, Locomotive::Site)
  - if manage_subdomain_or_domains?
    = f.inputs :name => :access_points do
      = f.input :subdomain, :as => :'Locomotive::Subdomain', :domain => application_domain, :input_html => { :readonly => !manage_subdomain? }

      - if manage_domains?
        = f.input :domains, :as => :'Locomotive::Empty'

      / = f.custom_input :subdomain, :css => 'path' do
      /   %em
      /     http://
      /   = f.text_field :subdomain, :readonly =>
      /   \.
      /   %em
      /     = application_domain

      / - if manage_domains?
      /   - @site.domains_without_subdomain.each_with_index do |name, index|
      /     %li{ :class => "item added #{'last' if index == @site.domains.size - 1}"}
      /       %em
      /         http://
      /       = text_field_tag 'site[domains][]', name, :class => 'string label void domain'
      /       &nbsp;
      /       = error_on_domain(@site, name)
      /       %span.actions
      /         = link_to image_tag('admin/form/icons/trash.png'), '#', :class => 'remove first', :confirm => t('locomotive.messages.confirm')
      /
      /   %li.item.template
      /     %em
      /       http://
      /     = text_field_tag 'label', t('formtastic.hints.site.domain_name'), :class => 'string label void domain'
      /     &nbsp;
      /     %span.actions
      /       = link_to image_tag('admin/form/icons/trash.png'), '#', :class => 'remove first', :confirm => t('locomotive.messages.confirm')
      /       %button{ :class => 'button light add', :type => 'button' }
      /         %span!= t('locomotive.buttons.new_item')

- if can?(:index, Locomotive::Membership)

  = f.inputs :name => :memberships do
    = f.semantic_fields_for :memberships do |fm|

      - membership, account = fm.object, fm.object.account

      %li.item.membership{ :'data-role' => membership.role }
        %strong= account.name

        %em.email= account.email

        - if can?(:update, membership)
          .role
            %em.editable= t("locomotive.memberships.roles.#{membership.role}")

            - if can?(:grant_admin, membership)
              = fm.select :role, Ability::ROLES.map { |r| [t("locomotive.memberships.roles.#{r}"), r] }, :include_blank => false
            - else
              = fm.select :role, (Ability::ROLES - ['admin']).map { |r| [t("locomotive.memberships.roles.#{r}"), r] }, :include_blank => false

          %span.actions
            = link_to image_tag('admin/form/icons/trash.png'), membership_url(membership), :class => 'remove first', :confirm =>t('locomotive.messages.confirm'), :method => :delete

        - else
          .role
            %em.locked= t("locomotive.memberships.roles.#{membership.role}")

- if can?(:manage, current_site)

  = f.inputs :name => :robots_txt, :class => "inputs foldable #{'folded' if inputs_folded?(@site)}" do
    / = f.custom_input :robots_txt, :css => 'code full', :with_label => false do
    /   = f.label :robots_txt
    /   %code{ :class => 'html' }
    /     = f.text_area :robots_txt, :class => 'small'
